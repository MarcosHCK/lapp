--[[
-- Copyright 2020-2021 MarcosHCK
--  This file is part of libLApp.
--
--  libLApp is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  libLApp is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with libLApp.  If not, see <http://www.gnu.org/licenses/>.
]]

local lapp = {};
lapp.version = "libLApp @PACKAGE_VERSION@";

local function check(have, want, ...)
  if not want then
    return false
  else
    return have == want or check(have, ...)
  end
end

local function checkArg(n, have, ...)
  have = type(have)
  if not check(have, ...) then
    local msg = string.format("bad argument #%d (%s expected, got %s)", n, table.concat({...}, " or "), have)
    error(msg, 3)
  end
end

local function padRight(value, spaces)
return value .. string.rep(' ', spaces - value:len());
end

local help_opt = {
  short = '-h',
  long = '--help',
  type = 'none',
  callback = function(app)
    local options = app.options;

    io.stdout:write(string.format('%s\r\nOptions:\r\n', app.arg_0 or app.name));
    for _, option in ipairs(options) do
      io.stdout:write(padRight('', 10));

      if(option.short) then
        local names = table.concat({option.short, option.long}, ', ');
        io.stdout:write(padRight(names, 20));
      else
        io.stdout:write(padRight(string.rep(' ', 4) .. option.long, 20));
      end

      local description = option.description;
      if(description) then
        io.stdout:write(padRight(description, 20))
      end

        io.stdout:write('\n');
    end

    if(#app.notes > 0) then
      io.stdout:write('Note' .. (#app.notes > 1 and 's' or '') .. ':\r\n');
      for _, note in ipairs(app.notes) do
        io.stdout:write('- ' .. note .. '\r\n');
      end
    end

    os.exit(0);
  end,
};

function lapp.new(name, main_)
  return setmetatable({
    name = name,
    main = main_,
    notes = {},
    options = {
      [1] = help_opt,
    },
  }, {
    __name = 'application';
    __tostring = function()
      return 'application';
    end,
    __index = lapp;
  });
end

function lapp.add_option(app, short, long, description, type_, callback)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, short, 'string', long ~= nil and 'nil');
  checkArg(3, long, 'string', short ~= nil and 'nil');
  checkArg(4, description, 'string', 'nil');
  checkArg(5, type_, 'string', 'nil');
  checkArg(6, callback, 'function', 'nil');

  type_ = type_ or 'none';
  assert(
      type_ == 'none' or
      type_ == 'string' or
      type_ == 'file' or
      type_ == 'file-create'
    , 'Invalid option type');

  local option = {
    short = short and ('-' .. short),
    long = long and ('--' .. long),
    type = type_,
    callback = callback,
    description = description,
  };

  table.insert(app.options, option);
return true;
end

function lapp.add_options(app, options)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, options, 'table');

  for _, option in ipairs(options) do
    assert(type(option) == 'table');
    local success = lapp.add_option(app, table.unpack(option));
    if(not success) then
      return success;
    end
  end
end

function lapp.add_note(app, note)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, note, 'string');
  table.insert(app.notes, note);
return true;
end

function lapp.add_notes(app, notes)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, notes, 'table');

  for _, note in ipairs(notes) do
    assert(type(note) == 'string');
    local success = lapp.add_note(app, note);
    if(not success) then
      return success;
    end
  end
end

local function search_option(options, option_name)
  local long = option_name:match('^%-%-') and 'long' or 'short';
  for _, option in ipairs(options) do
    if(option[long] == option_name) then
      return option;
    end
  end
end

local function check_arg(option, option_name, arg)
  if(type(arg) ~= 'string') then
    return false, 'Option ' .. option_name .. ' takes an argument';
  end
  if(option.type == 'file') then
    if(not require('filesystem').exists(arg)) then
      return false, 'File ' .. arg .. ' doesn\'t exists';
    end
  end
return true;
end

function lapp.run(app, ...)
  local files = {};
  local next_, cmd, key, option_name = ipairs({...});
  app.arg_0 = cmd[0];

  local pending_calls = {};

  while(key) do
    key, option_name = next_(cmd, key);
    if(type(option_name) == 'string') then
      if(option_name:match('^%-%-?.')) then

        local function parse_option(option_name)
          local option = search_option(app.options, option_name);
          if(option) then
            local arg = true;
            if(option.type ~= 'none') then
              key, arg = next_(cmd, key);
              local success, reason = check_arg(option, option_name, arg);
              if(not success) then
                return success, reason;
              end
            end
            if(option.callback) then
              table.insert(pending_calls, {
                func = option.callback,
                [1] = app,
                [2] = args,
              });
            end
            option.arg = arg;
          else
            return false, 'Unhandled option: ' .. option_name;
          end
        return true;
        end

        local islong = (option_name:sub(2, 2) == '-');
        if(islong) then
          local ret, reason = parse_option(option_name);
          if(ret ~= true) then
            return ret, reason;
          end
        else
          for i = 2, option_name:len(), 1 do
            local bit = option_name:sub(i, i);
            local ret, reason = parse_option('-' .. bit);
            if(ret ~= true) then
              return ret, reason;
            end
          end
        end
      else
        table.insert(files, option_name);
      end
    end
  end

  for _, pending in ipairs(pending_calls) do
    local func = pending.func;
    pending.func = nil;

    func(table.unpack(pending));
  end
return true, app.main(app, files);
end

function lapp.run_s(app, ...)
  local result = {lapp.run(app, ...)};
  if(result[1]) then
    return select(2, table.unpack(result));
  else
    error(select(2, table.unpack(result)));
  end
end

function lapp.getopt(app, option_name_)
  if(option_name_:match('^%-%-?.')) then
    local option = search_option(app.options, option_name_);
    if(option) then
      return option.arg;
    end
  else
    local option_names = {'-' .. option_name_, '--' .. option_name_};
    for _, option_name in ipairs(option_names) do
      local option = search_option(app.options, option_name);
      if(option) then
        return option.arg;
      end
    end
  end
end

function lapp.assertopt(app, option_name_)
  local value = lapp.getopt(app, option_name_);
  if(not value) then
    error(
    string.format('%s: option \'%s\' requires an argument\r\n' ..
                  'Try \'%s --help\' for more information\r\n',
                  app.name,
                  option_name_,
                  app.name
                  ));
  end
return value;
end

function lapp.assertarg(app, arg)
  if(not arg) then
    error(
    string.format('%s: requires and argument\r\n' ..
                  'Try \'%s --help\' for more information\r\n',
                  app.name,
                  app.name
                  ));
  end
return arg;
end

function lapp.assert(app, condition, message)
  assert(tostring(app) == 'application', 'Invalid application');
  if(condition ~= true) then
    error(
      string.format('%s: fatal error: %s',
        app.name, tostring(message)));
  end
end

return lapp;
