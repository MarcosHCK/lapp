--[[
-- Copyright 2020-2021 MarcosHCK
--  This file is part of libLApp.
--
--  libLApp is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  libLApp is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with libLApp.  If not, see <http://www.gnu.org/licenses/>.
]]

local lapp = {};
lapp.version = "libLApp @PACKAGE_VERSION@";

--
-- Bootstrap
--

local text;
do
  if(type(checkArg) ~= 'function') then
    local function check(have, want, ...)
      if not want then
        return false
      else
        return have == want or check(have, ...)
      end
    end

    function checkArg(n, have, ...)
      have = type(have)
      if not check(have, ...) then
        local msg = string.format("bad argument #%d (%s expected, got %s)", n, table.concat({...}, " or "), have)
        error(msg, 3)
      end
    end
  end

  local success, text_ = pcall(require, 'text');
  if(success == true) then
    text = text_;
  else
    text = {
      padRight = function(value, spaces)
        return value .. string.rep(' ', spaces - value:len());
      end,
    };
  end

  if(table.unpack == nil) then
    table.unpack = unpack;
  end
end

--
-- Arguments table
--

local arguments_table = {}

arguments_table.none =
  {
    set = function(app, option, argument) return true end,
    pending = function(app, option, list)
      local callback = option.callback;
      if(callback ~= nil) then
        table.insert(list, {
          callback = callback,
          [1] = app,
          [2] = option,
        });
      end
    return true;
    end,
    get = function(app, option) return true end,
    clean = function(app, option) end,
    takes = false,
  }

arguments_table.flag =
  {
    set = function(app, option, argument)
      option.flagged = true;
      return true;
    end,
    pending = function(app, option, list) return true end,
    get = function(app, option)
      return option.flagged or false;
    end,
    clean = arguments_table.none.clean,
    takes = false,
  }

arguments_table.string =
  {
    set = function(app, option, argument)
      if(argument ~= nil) then
        option.string = argument;
        return true;
      else
        return false, ([[Option %s takes an argument]]):format (option.short or option.long)
      end
    end,
    pending = function(app, option, list) end,
    get = function(app, option)
      return option.string, option.string and nil or (
        [[%s: option '%s' requires an argument. Try '%s --help' for more information]]
        ):format( app.arg_0,
                  option.short or option.long,
                  app.arg_0);
    end,
    clean = arguments_table.none.clean,
    takes = true,
  }

arguments_table.file =
  {
    set = function(app, option, argument)
      if(argument ~= nil) then
        option.filename = argument;
        return true;
      else
        return false, ([[Option %s takes an argument]]):format (option.short or option.long)
      end
    end,
    pending = function(app, option, list)
      if(option.filename == '-') then
        option.fd = io.stdout;
      else
        table.insert(list, {
          callback = function(filename, mode) option.fd, option.reason = io.open(filename, mode); end,
          [1] = option.filename,
          [2] = 'r',
        });
      end
    end,
    get = function(app, option)
      if(option.fd ~= nil) then
        return option.fd;
      else
        return false, option.reason or ('Can\'t open \'%s\''):format(option.filename);
      end
    end,
    clean = function(app, option)
      if(option.fd ~= nil) then
        option.fd:close();
      end
    end,
    takes = true,
  }

arguments_table['file-create'] =
  {
    set = function(app, option, argument)
      if(argument ~= nil) then
        option.filename = argument;
        return true;
      else
        return false, ([[Option %s takes an argument]]):format (option.short or option.long)
      end
    end,
    pending = function(app, option, list)
      if(option.filename == '-') then
        option.fd = io.stdin;
      else
        table.insert(list, {
          callback = function(filename, mode) option.fd, option.reason = io.open(filename, mode); end,
          [1] = option.filename,
          [2] = 'w',
        });
      end
    end,
    get = arguments_table.file.get,
    clean = arguments_table.file.clean,
    takes = true,
  }

--
-- Help handler
--

local help_opt = {
  short = '-h',
  long = '--help',
  argument = 'none',
  callback = function(app)
    local arguments = app.arguments;
    local options = app.options;

    io.stdout:write(string.format('%s\r\nOptions:', app.arg_0 or app.name));
    for _, argument in ipairs(arguments) do
      local arguments_string = argument.name;
      if(argument.optional) then
        arguments_string = string.format(' [%s]', arguments_string);
      else
        arguments_string = ' ' .. arguments_string;
      end

      io.stdout:write(arguments_string);
    end

    io.stdout:write('\r\n');

    for _, option in ipairs(options) do
      local arg_type = assert(arguments_table[option.argument], 'WTF?');
      io.stdout:write(text.padRight('', 10));

      if(option.short ~= nil) then
        local names = table.concat({option.short, option.long}, ', ');
        if(arg_type.takes == true and option.arg_description ~= nil) then
          names = names .. ((option.long and '=' or ' ') .. option.arg_description);
        end
        io.stdout:write(text.padRight(names, 20));
      elseif(option.long ~= nil) then
        local names = string.rep(' ', 4) .. option.long;
        if(arg_type.takes == true and option.arg_description ~= nil) then
          names = names .. ('=' .. option.arg_description);
        end
        io.stdout:write(text.padRight(names, 20));
      end

      local description = option.description;
      if(description) then
        io.stdout:write(text.padRight(description, 20))
      end

        io.stdout:write('\n');
    end

    if(#app.notes > 0) then
      io.stdout:write('Note' .. (#app.notes > 1 and 's' or '') .. ':\r\n');
      for _, note in ipairs(app.notes) do
        io.stdout:write('- ' .. note .. '\r\n');
      end
    end

    os.exit(0);
  end,
};

--
-- Library functions
--

function lapp.new(name, main_)
  return setmetatable({
    arguments = {},
    main = main_,
    name = name,
    options = {
      [1] = help_opt,
    },
    notes = {},
  }, {
    __name = 'application';
    __tostring = function()
      return 'application';
    end,
    __index = lapp;
  });
end

function lapp.add_argument(app, name, optional)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, name, 'string');
  checkArg(3, optional, 'boolean', 'nil');

  local argument = {
    name = name,
    optional = (optional == true),
  };

  table.insert(app.arguments, argument);
return true;
end

function lapp.add_arguments(app, arguments)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, arguments, 'table');

  local add_argument = lapp.add_argument;
  for _, argument in ipairs(arguments) do
    assert(type(argument) == 'table');
    local success = add_argument(app, table.unpack(arguments));
    if(not success) then
      return success;
    end
  end
return true;
end

function lapp.add_option(app, short, long, description, argument_, arg_description)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, short, 'string', long ~= nil and 'nil');
  checkArg(3, long, 'string', short ~= nil and 'nil');
  checkArg(4, description, 'string', 'nil');
  checkArg(5, argument_, 'string', 'function', 'nil');
  checkArg(6, arg_description, 'string', 'nil');

  local callback = (type(argument_) == 'function') and argument_ or nil;
  local argument = (type(argument_) == 'string') and argument_ or 'none';
  assert(arguments_table [argument] ~= nil, 'Invalid option type');

  local option =
  {
    short = short and ('-' .. short),
    long = long and ('--' .. long),
    description = description,
    argument = argument,
    arg_description = arg_description,
    callback = callback,
  };

  table.insert(app.options, option);
return true;
end

function lapp.add_options(app, options)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, options, 'table');

  local add_option = lapp.add_option;
  for _, option in ipairs(options) do
    assert(type(option) == 'table');
    local success = add_option(app, table.unpack(option));
    if(not success) then
      return success;
    end
  end
return true;
end

function lapp.add_note(app, note)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, note, 'string');
  table.insert(app.notes, note);
return true;
end

function lapp.add_notes(app, notes)
  assert(tostring(app) == 'application', 'Invalid application');
  checkArg(2, notes, 'table');

  for _, note in ipairs(notes) do
    assert(type(note) == 'string');
    local success = lapp.add_note(app, note);
    if(not success) then
      return success;
    end
  end
end

local function search_option(options, option_name)
  local long = option_name:match('^%-%-') and 'long' or 'short';
  for _, option in ipairs(options) do
    if(option[long] == option_name) then
      return option;
    end
  end
end

function lapp.run(app, ...)
  local files = {};
  local next_, cmd, key, option_name = ipairs({...});
  app.arg_0 = (args or arg or cmd or {[0]='(null)'})[0];

  local pending_calls = {};
  local noparse = false;

--
-- Parse command line
--

  while(key) do
    key, option_name = next_(cmd, key);
    if(type(option_name) == 'string') then
      if(option_name == '--') then
        noparse = true;
      elseif(noparse == true) then
        table.insert(files, option_name);
      elseif(option_name:match('^%-%-?.')) then

        local function parse_option(option_name)
          local option_name_ = option_name:match('([^%=]*)');
          local option_arg_ = option_name:match('%=(.*)');
          local option = search_option(app.options, option_name_);
          if(option) then
            local argument = nil;
            local arg_type = assert(arguments_table[option.argument], 'WTF?');

          --
          -- 'set' phase
          --

            if(arg_type.takes == true) then
              if(option_arg_ ~= nil) then
                argument = option_arg_;
              else
                key, argument = next_(cmd, key);
              end
            elseif(option_arg_ ~= nil) then
              return false, 'Option \'' .. option_name_ .. '\' doesn\'t take any arguments';
            end

            local success, reason =
            arg_type.set(app, option, argument);
            if(success == false) then
              return success, reason;
            end

          --
          -- 'pending' phase
          --

            local success, reason =
            arg_type.pending(app, option, pending_calls);
            if(success == false) then
              return success, reason;
            end
          else
            return false, 'Unhandled option: ' .. option_name_;
          end
        return true;
        end

        if(option_name:sub(2, 2) == '-') then
          local ret, reason = parse_option(option_name);
          if(ret ~= true) then
            return ret, reason;
          end
        else
          for i = 2, option_name:len(), 1 do
            local bit = option_name:sub(i, i);
            local ret, reason = parse_option('-' .. bit);
            if(ret ~= true) then
              return ret, reason;
            end
          end
        end
      else
        table.insert(files, option_name);
      end
    end
  end

--
-- Execute pending callbacks
--

  for _, pending in ipairs(pending_calls) do
    local func = pending.callback;
    func(table.unpack(pending, 1));
  end

--
-- Execute main
--

  local result = {app.main(app, files)};

--
-- 'cleanup' phase
--

  for _, option in ipairs(app.options) do
    local arg_type = assert(arguments_table[option.argument], 'WTF?');
    arg_type.clean(app, option);
  end
return table.unpack(result);
end

function lapp.run_s(app, ...)
  local result = {lapp.run(app, ...)};
  if(result[1]) then
    return select(2, table.unpack(result));
  else
    error(select(2, table.unpack(result)));
  end
end

local function getopt_(app, option_name_)
  if(option_name_:match('^%-%-?.')) then
    local option = search_option(app.options, option_name_);
    if(option) then
      local arg_type = assert(arguments_table[option.argument], 'WTF?');
      local success, reason
      return arg_type.get(app, option);
    end
  else
    local option_names = {'-' .. option_name_, '--' .. option_name_};
    for _, option_name in ipairs(option_names) do
      local option = search_option(app.options, option_name);
      if(option) then
        local arg_type = assert(arguments_table[option.argument], 'WTF?');
        return arg_type.get(app, option);
      end
    end
  end
end

function lapp.getopt(app, option_name_)
  local value, reason =
  getopt_(app, option_name_);
  if(value ~= false) then
    return value;
  end
end

function lapp.assertopt(app, option_name_)
  local value, reason =
  getopt_(app, option_name_);
  if(value ~= false) then
    return value;
  end
error(reason, 1);
end

function lapp.assertarg(app, arg)
  if(not arg) then
    error(
    string.format('%s: requires and argument\r\n' ..
                  'Try \'%s --help\' for more information\r\n',
                  app.arg_0,
                  app.arg_0
                  ), 1);
  end
return arg;
end

function lapp.assert(app, condition, message)
  assert(tostring(app) == 'application', 'Invalid application');
  if(condition ~= true) then
    error(
      string.format('%s: fatal error: %s',
        app.arg_0, tostring(message)), 1);
  end
end

--
-- Library
--
return lapp;
